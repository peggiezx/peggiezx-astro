---
import { NAV_ITEMS } from '../consts';
---

<header class="fixed-header">
  <div class="header-container">
    <nav class="navbar">
      <div class="nav-links">
        {NAV_ITEMS.map(item => (
          <a href={item.href} class="nav-link">
            {item.name}
          </a>
        ))}
      </div>
      
      <button class="contact-btn" id="contact-btn">
        Contact Me
      </button>
    </nav>
  </div>
</header>

<!-- Contact Modal -->
<div class="modal-overlay" id="contact-modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>Get In Touch</h3>
      <button class="modal-close" id="modal-close">&times;</button>
    </div>
    
    <form class="contact-form" id="contact-form" action="https://formspree.io/f/xdkddjqp" method="POST">
      <!-- Hidden field to set a custom subject -->
      <input type="hidden" name="_subject" value="New contact from portfolio website">
      
      <div class="form-group">
        <label for="name">Your Name*</label>
        <input type="text" id="name" name="name" required>
      </div>
      
      <div class="form-group">
        <label for="email">Your Email*</label>
        <input type="email" id="email" name="email" required>
      </div>
      
      <div class="form-group">
        <label for="message">Message*</label>
        <textarea id="message" name="message" rows="5" required></textarea>
      </div>
      
      <div class="form-actions">
        <button type="button" class="btn-secondary" id="cancel-btn">Cancel</button>
        <button type="submit" class="btn-primary" id="submit-btn">
          <span class="btn-text">Send Message</span>
          <span class="btn-loading" style="display: none;">Sending...</span>
        </button>
      </div>
      
      <!-- Success/Error messages -->
      <div class="form-message" id="form-message" style="display: none;"></div>
    </form>
  </div>
</div>

<style>
  .fixed-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(0, 0, 0, 0.08);
    z-index: 1000;
    padding: 1rem 0;
    transition: all 0.3s ease;
  }

  .fixed-header.scrolled {
    background: #10b981;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 2px 20px rgba(16, 185, 129, 0.1);
  }

  .fixed-header.scrolled .nav-link {
    color: white;
  }

  .fixed-header.scrolled .nav-link:hover {
    color: rgba(255, 255, 255, 0.8);
  }

  .fixed-header.scrolled .nav-link[aria-current="page"] {
    color: white;
  }

  .fixed-header.scrolled .nav-link::after {
    background: white;
  }

  .fixed-header.scrolled .contact-btn {
    color: white;
    border-color: white;
  }

  .fixed-header.scrolled .contact-btn:hover {
    background: white;
    color: #10b981;
    border-color: white;
  }

  .header-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .navbar {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
  }

  .nav-links {
    display: flex;
    gap: 2.5rem;
    align-items: center;
  }

  .contact-btn {
    position: absolute;
    right: 0;
    background: transparent;
    color: #374151;
    border: 2px solid #374151;
    padding: 0.6rem 1.5rem;
    border-radius: 8px;
    font-weight: 700;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    letter-spacing: 0.025em;
    text-transform: uppercase;
  }

  .contact-btn:hover {
    background: #10b981;
    color: white;
    border-color: #10b981;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
  }

  .nav-link {
    position: relative;
    font-weight: 700;
    font-size: 1.1rem;
    color: #374151;
    text-decoration: none;
    padding: 0.5rem 0;
    transition: color 0.2s ease;
    letter-spacing: 0.025em;
    text-transform: uppercase;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: #10b981;
    transition: width 0.3s ease;
  }

  .nav-link:hover {
    color: #10b981;
  }

  .nav-link:hover::after {
    width: 100%;
  }

  /* Active state for current page */
  .nav-link[aria-current="page"] {
    color: #10b981;
  }

  .nav-link[aria-current="page"]::after {
    width: 100%;
  }

  /* Modal Styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .modal-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .modal-content {
    background: white;
    border-radius: 16px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    transform: scale(0.9);
    transition: transform 0.3s ease;
  }

  .modal-overlay.active .modal-content {
    transform: scale(1);
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2rem 2rem 0 2rem;
    border-bottom: 1px solid #e5e7eb;
    margin-bottom: 1.5rem;
  }

  .modal-header h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #2d3748;
    margin: 0;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 2rem;
    color: #9ca3af;
    cursor: pointer;
    padding: 0;
    line-height: 1;
    transition: color 0.2s ease;
  }

  .modal-close:hover {
    color: #6b7280;
  }

  .contact-form {
    padding: 0 2rem 2rem 2rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 0.95rem;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
    font-family: inherit;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #3182ce;
    box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 100px;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 2rem;
  }

  .btn-primary {
    background: #10b981;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
  }

  .btn-secondary {
    background: transparent;
    color: #6b7280;
    border: 1px solid #d1d5db;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-secondary:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  /* Loading state */
  .btn-loading {
    display: none;
  }

  .btn-primary.loading .btn-text {
    display: none;
  }

  .btn-primary.loading .btn-loading {
    display: inline;
  }

  /* Form message styles */
  .form-message {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 8px;
    font-size: 0.9rem;
    text-align: center;
  }

  .form-message.success {
    background: #d1fae5;
    color: #065f46;
    border: 1px solid #a7f3d0;
  }

  .form-message.error {
    background: #fee2e2;
    color: #991b1b;
    border: 1px solid #fca5a5;
  }

  @media (max-width: 768px) {
    .header-container {
      padding: 0 1rem;
    }
    
    .nav-links {
      gap: 1.5rem;
    }
    
    .nav-link {
      font-size: 0.9rem;
    }
    
    .contact-btn {
      padding: 0.5rem 1rem;
      font-size: 0.85rem;
    }

    .modal-content {
      width: 95%;
      margin: 1rem;
    }

    .modal-header,
    .contact-form {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }

    .form-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const contactBtn = document.getElementById('contact-btn');
    const modal = document.getElementById('contact-modal');
    const modalClose = document.getElementById('modal-close');
    const cancelBtn = document.getElementById('cancel-btn');
    const contactForm = document.getElementById('contact-form');
    const header = document.querySelector('.fixed-header');

    // Open modal
    contactBtn?.addEventListener('click', () => {
      modal?.classList.add('active');
      document.body.style.overflow = 'hidden';
    });

    // Close modal functions
    const closeModal = () => {
      modal?.classList.remove('active');
      document.body.style.overflow = '';
      // Reset form
      (contactForm as HTMLFormElement)?.reset();
      // Hide form message
      const formMessage = document.getElementById('form-message');
      if (formMessage) {
        formMessage.style.display = 'none';
      }
      // Reset submit button
      const submitBtn = document.getElementById('submit-btn');
      if (submitBtn) {
        submitBtn.classList.remove('loading');
        (submitBtn as HTMLButtonElement).disabled = false;
      }
    };

    modalClose?.addEventListener('click', closeModal);
    cancelBtn?.addEventListener('click', closeModal);

    // Click outside to close
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Escape key to close
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal?.classList.contains('active')) {
        closeModal();
      }
    });

    // Handle form submission
    contactForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitBtn = document.getElementById('submit-btn');
      const formMessage = document.getElementById('form-message');
      
      if (!contactForm || !submitBtn || !formMessage) return;
      
      // Show loading state
      submitBtn.classList.add('loading');
      (submitBtn as HTMLButtonElement).disabled = true;
      formMessage.style.display = 'none';
      
      try {
        const formData = new FormData(contactForm as HTMLFormElement);
        const response = await fetch((contactForm as HTMLFormElement).action, {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json'
          }
        });
        
        if (response.ok) {
          // Success
          formMessage.textContent = 'Thank you! Your message has been sent successfully.';
          formMessage.className = 'form-message success';
          formMessage.style.display = 'block';
          
          // Reset form
          (contactForm as HTMLFormElement).reset();
          
          // Close modal after showing success message
          setTimeout(() => {
            closeModal();
          }, 2000);
        } else {
          // Error from server
          const data = await response.json();
          throw new Error(data.error || 'Failed to send message');
        }
      } catch (error) {
        // Show error message
        formMessage.textContent = 'Sorry, there was an error sending your message. Please try again.';
        formMessage.className = 'form-message error';
        formMessage.style.display = 'block';
      } finally {
        // Remove loading state
        submitBtn.classList.remove('loading');
        (submitBtn as HTMLButtonElement).disabled = false;
      }
    });

    // Handle scroll effect for header
    function handleScroll() {
      if (window.scrollY > 50) {
        header?.classList.add('scrolled');
      } else {
        header?.classList.remove('scrolled');
      }
    }

    window.addEventListener('scroll', handleScroll);
    
    // Initial check
    handleScroll();
  });
</script>